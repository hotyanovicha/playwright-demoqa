name: UI Regression [Chrome]

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps chromium
    
    - name: Run Playwright tests in Chrome
      run: npm run test:chrome
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
      if: always()
    
    - name: Prepare report for GitHub Pages
      if: always()
      run: |
        mkdir -p github-pages-site
        cp -r playwright-report/* github-pages-site/

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      if: always()
      with:
        path: github-pages-site/
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      if: always()

    - name: Extract test results
      if: always()
      id: test_results
      run: |
        if [ -f test-results.json ]; then
          TOTAL=$(jq '.suites[].suites[].specs | length' test-results.json | awk '{s+=$1} END {print s}')
          PASSED=$(jq '[.suites[].suites[].specs[].tests[] | select(.status == "expected")] | length' test-results.json)
          FAILED=$(jq '[.suites[].suites[].specs[].tests[] | select(.status == "unexpected")] | length' test-results.json)
          
          if [ "$TOTAL" -eq 0 ]; then
            PASS_RATE="0"
          else
            PASS_RATE=$(awk "BEGIN {printf \"%.1f\", ($PASSED/$TOTAL)*100}")
          fi
          
          if [ "$FAILED" -eq 0 ]; then
            STATUS="‚úÖ PASSED"
            STATUS_COLOR="good"
          else
            STATUS="‚ùå FAILED"
            STATUS_COLOR="danger"
          fi
          
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "passed=$PASSED" >> $GITHUB_OUTPUT
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
          echo "pass_rate=$PASS_RATE" >> $GITHUB_OUTPUT
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "status_color=$STATUS_COLOR" >> $GITHUB_OUTPUT
        else
          echo "total=0" >> $GITHUB_OUTPUT
          echo "passed=0" >> $GITHUB_OUTPUT
          echo "failed=0" >> $GITHUB_OUTPUT
          echo "pass_rate=0" >> $GITHUB_OUTPUT
          echo "status=‚ö†Ô∏è NO RESULTS" >> $GITHUB_OUTPUT
          echo "status_color=warning" >> $GITHUB_OUTPUT
        fi

    - name: Send Slack notification
      if: always()
      uses: slackapi/slack-github-action@v1.27.0
      with:
        payload: |
          {
            "text": "Playwright Test Results",
            "attachments": [
              {
                "color": "${{ steps.test_results.outputs.status_color }}",
                "blocks": [
                  {
                    "type": "header",
                    "text": {
                      "type": "plain_text",
                      "text": "${{ steps.test_results.outputs.status }} - ${{ github.workflow }}"
                    }
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Job:*\n${{ github.job }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Environment:*\nChromium on Ubuntu"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Total Tests:*\n${{ steps.test_results.outputs.total }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Pass Rate:*\n${{ steps.test_results.outputs.pass_rate }}%"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Passed:*\n‚úÖ ${{ steps.test_results.outputs.passed }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Failed:*\n‚ùå ${{ steps.test_results.outputs.failed }}"
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "<${{ steps.deployment.outputs.page_url }}|üìä View Test Report> | <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|üîó View Job>"
                    }
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

name: UI Regression [Chrome]

run-name: >
  ${{ github.workflow }} #${{ github.run_number }}
  :: ${{ inputs.env || 'dev' }}
  :: ${{ inputs.project || 'api' }}
  :: ${{ inputs.tests || 'all tests' }}

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment'
        required: false
        default: 'dev'
        type: choice
        options: [ dev, staging, prod ]
      project:
        description: 'Project'
        required: false
        default: 'api'
        type: choice
        options: [ api, web, mobile ]
      tests:
        description: 'Tests to run'
        required: false
        default: 'all tests'
        type: string

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - name: Setup and Install
      uses: actions/checkout@v4
    
    - name: Setup Node.js and Install Dependencies
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install Dependencies and Playwright
      run: |
        npm ci
        npx playwright install --with-deps chromium
    
    - name: Run Playwright tests
      run: |
        START_TIME=$(date +%s)
        set +e  # Disable exit on error
        npm run test:chrome
        EXIT_CODE=$?
        set -e  # Re-enable exit on error
        END_TIME=$(date +%s)
        TEST_DURATION=$((END_TIME - START_TIME))
        echo "TEST_DURATION=$TEST_DURATION" >> $GITHUB_ENV
        echo "EXIT_CODE=$EXIT_CODE" >> $GITHUB_ENV
        echo "Tests completed with exit code: $EXIT_CODE"
    
    - name: Extract test results
      id: test_execution
      if: always()
      run: |
        # Format duration
        DURATION_SEC="${TEST_DURATION:-0}"
        if [ "$DURATION_SEC" -eq 0 ]; then
          DURATION_FORMATTED="N/A"
        else
          DURATION_MIN=$((DURATION_SEC / 60))
          DURATION_REMAINING_SEC=$((DURATION_SEC % 60))
          if [ "$DURATION_MIN" -eq 0 ]; then
            DURATION_FORMATTED="${DURATION_REMAINING_SEC} sec"
          else
            DURATION_FORMATTED="${DURATION_MIN} min ${DURATION_REMAINING_SEC} sec"
          fi
        fi
        
        # Parse test results
        if [ -f test-results.json ]; then
          echo "Found test-results.json, extracting metrics..."
          TOTAL=$(jq '.suites[].suites[].specs | length' test-results.json | awk '{s+=$1} END {print s}')
          PASSED=$(jq '[.suites[].suites[].specs[].tests[] | select(.status == "expected")] | length' test-results.json)
          FAILED=$(jq '[.suites[].suites[].specs[].tests[] | select(.status == "unexpected")] | length' test-results.json)
          SKIPPED=$(jq '[.suites[].suites[].specs[].tests[] | select(.status == "skipped")] | length' test-results.json)
          FLAKY=$(jq '[.suites[].suites[].specs[].tests[] | select(.status == "flaky")] | length' test-results.json)
          
          echo "Test results - Total: $TOTAL, Passed: $PASSED, Failed: $FAILED, Skipped: $SKIPPED, Flaky: $FLAKY"

          if [ "${FAILED:-0}" -eq 0 ] && [ "${TOTAL:-0}" -gt 0 ]; then
            STATUS="PASSED"
            STATUS_COLOR="good"
          else
            STATUS="FAILED"
            STATUS_COLOR="danger"
          fi

          EXECUTED=$((TOTAL - SKIPPED))

          # Calculate pass rate based on executed tests (excluding skipped)
          # Count flaky tests as passed
          if [ "${EXECUTED:-0}" -eq 0 ]; then
            PASS_RATE="0"
          else
            PASS_RATE=$(awk "BEGIN {printf \"%.0f\", (($PASSED+$FLAKY)/$EXECUTED)*100}")
          fi

          # Icon only if pass rate < 90%
          if awk "BEGIN {exit !(${PASS_RATE} < 90)}"; then
            PASS_RATE_ICON="⚠️ "
          else
            PASS_RATE_ICON=""
          fi
          
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "passed=$PASSED" >> $GITHUB_OUTPUT
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
          echo "skipped=$SKIPPED" >> $GITHUB_OUTPUT
          echo "flaky=$FLAKY" >> $GITHUB_OUTPUT
          echo "executed=$EXECUTED" >> $GITHUB_OUTPUT
          echo "pass_rate=$PASS_RATE" >> $GITHUB_OUTPUT
          echo "pass_rate_icon=$PASS_RATE_ICON" >> $GITHUB_OUTPUT
          echo "duration_formatted=$DURATION_FORMATTED" >> $GITHUB_OUTPUT
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "status_color=$STATUS_COLOR" >> $GITHUB_OUTPUT
        else
          echo "WARNING: test-results.json not found"
          echo "total=0" >> $GITHUB_OUTPUT
          echo "passed=0" >> $GITHUB_OUTPUT
          echo "failed=0" >> $GITHUB_OUTPUT
          echo "skipped=0" >> $GITHUB_OUTPUT
          echo "flaky=0" >> $GITHUB_OUTPUT
          echo "executed=0" >> $GITHUB_OUTPUT
          echo "pass_rate=0" >> $GITHUB_OUTPUT
          echo "pass_rate_icon=" >> $GITHUB_OUTPUT
          echo "duration_formatted=$DURATION_FORMATTED" >> $GITHUB_OUTPUT
          echo "status=NO RESULTS" >> $GITHUB_OUTPUT
          echo "status_color=warning" >> $GITHUB_OUTPUT
        fi
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
      if: always()
    
    - name: Prepare report for GitHub Pages
      if: always()
      run: |
        mkdir -p github-pages-site
        cp -r playwright-report/* github-pages-site/

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      if: always()
      with:
        path: github-pages-site/
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      if: always()


    - name: Add summary
      if: always()
      shell: bash
      run: |
        {
          echo "### Test Execution Summary"
          echo ""
          echo "| Metric | Value |"
          echo "|---|---|"
          echo "| **Environment** | \`${{ inputs.env || 'dev' }}\` |"
          echo "| **Project** | \`${{ inputs.project || 'api' }}\` |"
          echo "| **Tests** | \`${{ inputs.tests || 'all tests' }}\` |"
          echo "| **Test Execution Duration** | \`${{ steps.test_execution.outputs.duration_formatted || 'N/A' }}\` |"
          echo "| **Exit Code** | \`${{ env.EXIT_CODE || 'N/A' }}\` |"

          if [ -f "test-results.json" ]; then
            EXPECTED=$(jq '[.suites[].suites[].specs[].tests[] | select(.status == "expected")] | length' test-results.json 2>/dev/null || echo "0")
            UNEXPECTED=$(jq '[.suites[].suites[].specs[].tests[] | select(.status == "unexpected")] | length' test-results.json 2>/dev/null || echo "0")
            SKIPPED=$(jq '[.suites[].suites[].specs[].tests[] | select(.status == "skipped")] | length' test-results.json 2>/dev/null || echo "0")
            FLAKY=$(jq '[.suites[].suites[].specs[].tests[] | select(.status == "flaky")] | length' test-results.json 2>/dev/null || echo "0")
            TOTAL=$(jq '.suites[].suites[].specs | length' test-results.json | awk '{s+=$1} END {print s}')
            PASSED=$EXPECTED
            FAILED=$UNEXPECTED

            if [ "$TOTAL" -gt 0 ]; then
              EXECUTED_SUMMARY=$((TOTAL - SKIPPED))
              if [ "$EXECUTED_SUMMARY" -gt 0 ]; then
                PASS_RATE=$(awk "BEGIN {printf \"%.1f\", ($PASSED + $FLAKY) * 100 / $EXECUTED_SUMMARY}")
              else
                PASS_RATE="0.0"
              fi
              echo "| **Total** | $TOTAL |"
              echo "| **Passed** | $PASSED |"
              echo "| **Failed** | $FAILED |"
              echo "| **Skipped** | $SKIPPED |"
              echo "| **Flaky** | $FLAKY |"
              echo "| **Pass Rate** | ${PASS_RATE}% |"
            else
              echo "| **Test Results** | No tests executed |"
            fi
          else
            echo "| **Test Results** | No results file found |"
          fi

          echo ""
          echo "### Artifacts"
          echo "- Report: **${{ github.workflow }}-report-#${{ github.run_number }}-${{ inputs.env || 'dev' }}-${{ inputs.project || 'api' }}**"
          echo "- Results: **results-#${{ github.run_number }}-${{ inputs.env || 'dev' }}-${{ inputs.project || 'api' }}**"
        } >> "$GITHUB_STEP_SUMMARY"

    - name: Send Slack notification
      if: always()
      run: |
        cat > slack-payload.json << EOF
        {
          "text": "Playwright Test Summary",
          "blocks": [
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "${{ steps.test_execution.outputs.pass_rate_icon }}*${{ steps.test_execution.outputs.pass_rate }}%* (*${{ steps.test_execution.outputs.passed }}/${{ steps.test_execution.outputs.executed }}*) tests passed (*${{ steps.test_execution.outputs.duration_formatted }}*) — <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }} #${{ github.run_number }}> (<${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref_name }}|${{ github.ref_name }}>)\n*${{ steps.test_execution.outputs.total }}* total | *${{ steps.test_execution.outputs.passed }}* passed | *${{ steps.test_execution.outputs.failed }}* failed | *${{ steps.test_execution.outputs.skipped }}* skipped | *${{ steps.test_execution.outputs.flaky }}* flaky | <${{ steps.deployment.outputs.page_url }}|View Test Report>"
              }
            }
          ]
        }
        EOF
        
        # Send notification using curl
        curl -X POST -H 'Content-type: application/json' \
          --data @slack-payload.json \
          ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Fail job if tests failed
      if: always()
      run: |
        if [ "${EXIT_CODE:-0}" -ne 0 ]; then
          echo "Playwright reported failures (exit code $EXIT_CODE)."
          exit $EXIT_CODE
        fi
